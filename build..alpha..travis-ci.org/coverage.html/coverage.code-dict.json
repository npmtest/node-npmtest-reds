{"/home/travis/build/npmtest/node-npmtest-reds/test.js":"/* istanbul instrument in package npmtest_reds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reds/lib.npmtest_reds.js":"/* istanbul instrument in package npmtest_reds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_reds = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_reds = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-reds/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-reds && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_reds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_reds\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_reds.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_reds.rollup.js'] =\n            local.assetsDict['/assets.npmtest_reds.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_reds.__dirname +\n                    '/lib.npmtest_reds.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reds/node_modules/reds/index.js":"\nmodule.exports = require('./lib/reds');","/home/travis/build/npmtest/node-npmtest-reds/node_modules/reds/lib/reds.js":"\n/*!\n * reds\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar natural = require('natural');\nvar metaphone = natural.Metaphone.process;\nvar stem = natural.PorterStemmer.stem;\nvar stopwords = natural.stopwords;\nvar redis = require('redis');\nfunction noop(){};\n\n/**\n * Library version.\n */\n\nexports.version = '0.1.4';\n\n/**\n * Expose `Search`.\n */\n\nexports.Search = Search;\n\n/**\n * Expose `Query`.\n */\n\nexports.Query = Query;\n\n/**\n * Search types.\n */\n\nvar types = {\n  intersect: 'zinterstore',\n  union: 'zunionstore',\n  and: 'zinterstore',\n  or: 'zunionstore'\n};\n\n/**\n * Create a redis client, override to\n * provide your own behaviour.\n *\n * @return {RedisClient}\n * @api public\n */\n\nexports.createClient = function(){\n  return exports.client\n    || (exports.client = redis.createClient());\n};\n\n/**\n * Return a new reds `Search` with the given `key`.\n *\n * @param {String} key\n * @return {Search}\n * @api public\n */\n\nexports.createSearch = function(key){\n  if (!key) throw new Error('createSearch() requires a redis key for namespacing');\n  return new Search(key);\n};\n\n/**\n * Return the words in `str`.\n *\n * @param {String} str\n * @return {Array}\n * @api private\n */\n\nexports.words = function(str){\n  return String(str).match(/\\w+/g);\n};\n\n/**\n * Stem the given `words`.\n *\n * @param {Array} words\n * @return {Array}\n * @api private\n */\n\nexports.stem = function(words){\n  var ret = [];\n  if (!words) return ret;\n  for (var i = 0, len = words.length; i < len; ++i) {\n    ret.push(stem(words[i]));\n  }\n  return ret;\n};\n\n/**\n * Strip stop words in `words`.\n *\n * @param {Array} words\n * @return {Array}\n * @api private\n */\n\nexports.stripStopWords = function(words){\n  var ret = [];\n  if (!words) return ret;\n  for (var i = 0, len = words.length; i < len; ++i) {\n    if (~stopwords.indexOf(words[i])) continue;\n    ret.push(words[i]);\n  }\n  return ret;\n};\n\n/**\n * Returns an object mapping each word in a Array\n * to the number of times it occurs in the Array.\n *\n * @param {Array} words\n * @return {Object}\n * @api private\n */\n\nexports.countWords = function(words){\n  var obj = {};\n  if (!words) return obj;\n  for (var i = 0, len = words.length; i < len; ++i) {\n    obj[words[i]] = (obj[words[i]] || 0) + 1;\n  }\n  return obj;\n};\n\n/**\n * Return the given `words` mapped to the metaphone constant.\n *\n * Examples:\n *\n *    metaphone(['tobi', 'wants', '4', 'dollars'])\n *    // => { '4': '4', tobi: 'TB', wants: 'WNTS', dollars: 'TLRS' }\n *\n * @param {Array} words\n * @return {Object}\n * @api private\n */\n\nexports.metaphoneMap = function(words){\n  var obj = {};\n  if (!words) return obj;\n  for (var i = 0, len = words.length; i < len; ++i) {\n    obj[words[i]] = metaphone(words[i]);\n  }\n  return obj;\n};\n\n/**\n * Return an array of metaphone constants in `words`.\n *\n * Examples:\n *\n *    metaphone(['tobi', 'wants', '4', 'dollars'])\n *    // => ['4', 'TB', 'WNTS', 'TLRS']\n *\n * @param {Array} words\n * @return {Array}\n * @api private\n */\n\nexports.metaphoneArray = function(words){\n  var arr = [];\n  var constant;\n\n  if (!words) return arr;\n  \n  for (var i = 0, len = words.length; i < len; ++i) {\n    constant = metaphone(words[i]);\n    if (!~arr.indexOf(constant)) arr.push(constant);\n  }\n  \n  return arr;\n};\n\n/**\n * Return a map of metaphone constant redis keys for `words`\n * and the given `key`.\n *\n * @param {String} key\n * @param {Array} words\n * @return {Array}\n * @api private\n */\n\nexports.metaphoneKeys = function(key, words){\n  return exports.metaphoneArray(words).map(function(c){\n    return key + ':word:' + c;\n  });\n};\n\n/**\n * Initialize a new `Query` with the given `str`\n * and `search` instance.\n *\n * @param {String} str\n * @param {Search} search\n * @api public\n */\n\nfunction Query(str, search) {\n  this.str = str;\n  this.type('and');\n  this.search = search;\n}\n\n/**\n * Set `type` to \"union\" or \"intersect\", aliased as\n * \"or\" and \"and\".\n *\n * @param {String} type\n * @return {Query} for chaining\n * @api public\n */\n\nQuery.prototype.type = function(type){\n  this._type = types[type];\n  return this;\n};\n\n/**\n * Limit search to the specified range of elements.\n *\n * @param {String} start\n * @param {String} stop\n * @return {Query} for chaining\n * @api public\n */\nQuery.prototype.between = function(start, stop){\n  this._start = start;\n  this._stop = stop;\n  return this;\n};\n\n/**\n * Perform the query and callback `fn(err, ids)`.\n *\n * @param {Function} fn\n * @return {Query} for chaining\n * @api public\n */\n\nQuery.prototype.end = function(fn){\n  var key = this.search.key;\n  var db = this.search.client;\n  var query = this.str;\n  var words = exports.stem(exports.stripStopWords(exports.words(query)));\n  var keys = exports.metaphoneKeys(key, words);\n  var type = this._type;\n  var start = this._start || 0;\n  var stop = this._stop || -1;\n\n  if (!keys.length) return fn(null, []);\n\n  var tkey = key + 'tmpkey';\n  db.multi([\n    [type, tkey, keys.length].concat(keys),\n    ['zrevrange', tkey, start, stop],\n    ['zremrangebyrank', tkey, start, stop],\n  ]).exec(function(err, ids) {\n    ids = ids[1];\n    fn(err, ids);\n  });\n\n  return this;\n};\n\n/**\n * Initialize a new `Search` with the given `key`.\n *\n * @param {String} key\n * @api public\n */\n\nfunction Search(key) {\n  this.key = key;\n  this.client = exports.createClient();\n}\n\n/**\n * Index the given `str` mapped to `id`.\n *\n * @param {String} str\n * @param {Number|String} id\n * @param {Function} fn\n * @api public\n */\n\nSearch.prototype.index = function(str, id, fn){\n  var key = this.key;\n  var db = this.client;\n  var words = exports.stem(exports.stripStopWords(exports.words(str)));\n  var counts = exports.countWords(words);\n  var map = exports.metaphoneMap(words);\n  var keys = Object.keys(map);\n\n  var cmds = [];\n  keys.forEach(function(word, i){\n    cmds.push(['zadd', key + ':word:' + map[word], counts[word], id]);\n    cmds.push(['zadd', key + ':object:' + id, counts[word], map[word]]);\n  });\n  db.multi(cmds).exec(fn || noop);\n\n  return this;\n};\n\n/**\n * Remove occurrences of `id` from the index.\n *\n * @param {Number|String} id\n * @api public\n */\n\nSearch.prototype.remove = function(id, fn){\n  fn = fn || noop;\n  var key = this.key;\n  var db = this.client;\n  \n  db.zrevrangebyscore(key + ':object:' + id, '+inf', 0, function(err, constants){\n    if (err) return fn(err);\n    var multi = db.multi().del(key + ':object:' + id);\n    constants.forEach(function(c){\n      multi.zrem(key + ':word:' + c, id);\n    });\n    multi.exec(fn);\n  });\n  \n  return this;\n};\n\n/**\n * Perform a search on the given `query` returning\n * a `Query` instance.\n *\n * @param {String} query\n * @param {Query}\n * @api public\n */\n\nSearch.prototype.query = function(query){\n  return new Query(query, this);\n};\n"}